---
layout:     post
title:      "15장 디자인 패턴과 프레임워크"
date:       2020-03-10 00:00:00
categories: object
summary:    15장 디자인 패턴과 프레임워크
---

> 오브젝트의 15장을 요약한 내용 입니다.

### 디자인 패턴이란?

- 소프트웨어 설계에서 반복적으로 발생하는 문제에 대해 적용할 수 있는 해결 방법
- 디자인 패턴을 익히고 나면 **변경의 방향**과 **주기**를 이해하는 것만으로도 필요한 역할과 책임, 역할들의 협력 방식을 순간적으로 적용할 수 있다.
- 디자인 패턴과 프레임워크의 차이
    - 디자인 패턴은 특정한 변경을 일관성 있게 다룰 수 있는 협력 템플릿을 제공한다.
    - 프레임워크는 특정한 변경을 일관성 있게 다룰 수 있는 확장 가능한 코드 템플릿을 제공한다.

## 디자인 패턴과 설계 재사용

### 패턴이란 무엇인가?

- 패턴은 반복적으로 발생하는 **문제**와 **해법**의 쌍으로 정의된다.
- 패턴을 사용함으로써 이미 알려진 문제와 이에 대한 해법을 문서로 정리할 수 있으며, 
이 지식을 다른 사람과 의사소통할 수 있다.
- 패턴은 추상적인 원칙과 실제 코드 작성 사이의 간극을 메워주며 실질적인 코드 작성을 돕는다.
- 패턴의 요점은 패턴이 실무에서 탄생했다는 점이다.
- 마틴 파울러가 언급한 것처럼 패턴의 범위가 소프트웨어 개발과 직접적인 연관성을 가진 분석, 설계, 구현 영역만으로 한정되는 것은 아니다. 
다양한 크기의 프로젝트 조직을 구성하는 방법, 프로젝트 일정을 추정하는 방법, 스토리 카드나 백로그를 통해 요구사항을 관리하는 방법과 같이 반복적인 규칙을 발견할 수 있는 모든 영역이 패턴의 대상이 될 수 있다.
- 패턴은 홀로 존재하지 않는다. 특정 패턴 내에 포함된 컴포넌트와 컴포넌트 간의 관계는 더 작은 패턴에 의해 서술될 수 있으며, 패턴들을 포함하는 더 큰 패턴 내에 통합될 수 있다.

### 패턴 분류

- 분석 패턴 : 도메인 내의 개념적인 문제를 해결하는 데 초점을 맞춘다.
- 디자인 패턴 : 중간 규모의 패턴으로 특정한 설계 문제를 해결하는 것을 못적으로 하며, 프로그래밍 언어나 프로그래밍 패러다임에 독립적이다.
- 이디엄 : 특정 프로그래밍 언어에만 국한된 하위 레벨 패턴으로, 주어진 언어의 기능을 사용해 컴포넌트, 혹은 컴포넌트 간의 특정 측면을 구현하는 방법을 서술한다.

특정한 상황에 적용 가능한 패턴을 잘 알고 있다면 책임 주도 설계의 절차를 하나하나 따르지 않고도 시스템 안에 구현할 객체들의 역할과 책임, 협력 관계를 빠르고 손쉽게 구성할 수 있다. 

### STRATEGY / TEMPLATE METHOD / DECORATOR 패턴 적용 예제

- STRATEGY패턴

    알고리즘의 변경을 캡슐화하는 것이고 이를 구현하기 위해 객체 합성을 이용한다. 

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3d894bc8-aa6f-457c-9b63-5513e4e500bb/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3d894bc8-aa6f-457c-9b63-5513e4e500bb/Untitled.png)

- 아키텍처 패턴 : 소프트웨어의 전체적인 구조를 결정하기 위해 사용, 미리 정의된 서브시스템들을 제공하고, 각 서브시스템들의 책임을 정의하며, 서브시스템들 사이의 관계를 조직화하는 규칙과 가이드라인을 포함한다.
- TEMPLATE METHOD 패턴

    알고리즘을 캡슐화하기 위래 합성 관계가 아닌 상속 관계를 사용하기 위함

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/17f5ed0d-5923-4de5-a2ad-6cfb9391c3e3/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/17f5ed0d-5923-4de5-a2ad-6cfb9391c3e3/Untitled.png)

합성보다는 결합도가 높은 상속을 사용했기 때문에 strategy 패턴처럼 런타임에 객체의 알고리즘을 변경하는것은 불가능하다. 하지만 알고리즘 교체와 같은 요구사항이 없다면 상대적으로 strategy  패턴보다 복잡도를 낮출 수 있다는 면에서는 장점이라고 할 수 있다. 

- DECORATOR 패턴

    객체의 행동을 동적으로 추가할 수 있게 해주는 패턴으로서 기본적으로 객체의 행동을 결합하기 위해 객체 합성을 사용한다. 또한 선택적인 행동의 개수와 순서에 대한 변경을 캡슐화 할 수 있다. 

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7920e859-2328-4c12-8499-e8825f54cd06/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7920e859-2328-4c12-8499-e8825f54cd06/Untitled.png)

### 패턴은 출발점이다

망치를 들면 모든 것이 못으로 보인다는 격언처럼 패턴을 익힌 후에는 모든 설계 문제를 패턴으로 해결하려고 시도하기 쉽다. 조슈아 케리에브스키는 이를 '패턴 만능주의'라고 부른다. 

이렇게 되면 부적절한 상황에서 부적절하게 사용된 패턴으로 인해 소프트웨어의 엔트로피가 증가하는 부작용을 낳기 쉽다. 패턴을 남용하지 않기 위해서는 다양한 트레이드오프 관계 속에서 패턴을 적용하고 사용해 본 경험이 필요하다. 

전문가와 초심자의 또 다른 차이점은 전문가는 다양한 실무 경험을 통해 어떤 컨텍스트에서 어떤 패턴을 적용해야 하는지, 그리고 이보다 더 중요한 것으로 어떤 패턴을 적용해서는 안 되는지에 대한 감각을 익히고 있다는 점이다. 

타당한 이유 없이 패턴을 적용하면 패턴에 익숙한 사람들의 경우에는 설계의 의도를 이해하지 못하게 되고, 패턴을 알지 못하는 사람들은 불필요하게 복잡한 설계를 따라가느라 시간을 낭비하게 된다. 

패턴을 적용할 때는 함께 작업하는 사람들이 패턴에 익숙한지 여부를 확인하고, 그렇지 않다면 설계에 대한 지식과 더불어 패턴에 대한 지식도 함께 공유하는것이 필요하다. 

### 제어 역전 원리

객체지향 설계의 재사용성은 개별 클래스가 아니라 객체들 사이의 공통적인 협력 흐름으로부터 나온다. 

의존성 역전 원리에 따라 구축되지 않은 시스템은 협력 흐름을 재사용할 수도 없으며 변경에 유연하게 대처할 수도 없다. 

의존성을 역전시키면 제어 흐름의 주체 역시 역전된다. 이를 제어 역전원리 할리우드 원리라고 한다. 

우리의 코드는 수동적인 존재다. 프레임워크가 우리의 코드를 호출해줄 때까지 그저 넋 놓고 기다리고 있을 수밖에 없다. 할리우드에서 캐스팅 담당자가 오디션을 보러 온 배우에게 "먼저 연락하지 마세요. 저희가 연락 드리겠습니다"라고 말하는 것처럼 프레임워크는 자신을 찾지 말라고 이야기한다. 

제어의 역전이 프레임워크의 핵심 개념인 동시에 코드의 재사용을 가능하게 하는 힘이라는 사실을 이해해야 한다.된다.** 관람객이 스스로 가방 안의 현금과 초대장을 처리하고 판매원이 스스로 매표소의 티켓과 판매 요금을 다루게 한다면 이 모든 문제를 한 번에 해결할 수 있을 것이다. 

## 자율성을 높이자

Theater의 enter 메서드에서 TicketOffice에 접근하는 모든 코드를 TicketSeller 내부로 숨기는 것이다. TicketSeller에 sellTo 메서드를 추가하고 Thater에 있던 로직을 이 메서드로 옮기자

    public class TheaterSeller {
    	private TicketOffice ticketOffice;
    
    	public Theater(TicketOffice ticketOffice) {
    		this.ticketOffice = ticketOffice;
    	}
    
    	public void sellTo(Audience audience) {
    		if(audience.getBag().hasInvitation()) {
    			Ticket ticket = ticketOffice.getTicket();
    			audience.getBag().getTicket(ticket);
    		} else {
    			Ticket ticket = ticketOffice.getTicket();
    			audience.getBag().minusAmount(ticket.getFee());
    			ticketOffice.plusAmount(ticket.getFee());
    			audience.getBag().setTicket(ticket);
    		}
    	}
    }

    public class Theater {
    	private TicketSeller ticketSeller;
    
    	public Theater(TicketSeller ticketSeller) {
    		this.ticketSeller = ticketSeller;
    	}
    
    	public void enter(Audience audience) {
    		ticketSeller.sellTo(audience);
    	}
    }

이처럼 개념적이나 물리적으로 객체 내부의 세부적인 사항을 감추는 것을 **캡슐화**라고 부른다. 캡슐화를 통해 객체 내부로의 접근을 제한하면 객체와 객체 사이의 결합도를 낮출 수 있기 때문에 설계를 좀 더 쉽게 변경할 수 있게 된다. 

Theater는 오직 TicketSeller의 인터페이스에만 의존한다. TicketSeller가 내부에 TicketOffice 인스턴스를 포함하고 있다는 사실은 구현의 영역에 속한다. 

TicketSeller 다음으로 Audience의 캡슐화를 개선하자

    public class Audience {
    	private Bag bag;
    
    	public Audience(Bag bag) {
    		this.bag = bag;
    	}
    
    	public Long buy(Ticket ticket) {
    		if(bag.hasInvitation()) {
    			bag.getTicket(ticket);
    			return 0;
    		} else { 
    			bag.minusAmount(ticket.getFee());
    			bag.setTicket(ticket);
    			return ticket.getFee();
    		}
    	}
    }

    public class TheaterSeller {
    	private TicketOffice ticketOffice;
    
    	public Theater(TicketOffice ticketOffice) {
    		this.ticketOffice = ticketOffice;
    	}
    
    	public void sellTo(Audience audience) {
    		iticketOffice.plusAmount(audience.buy(ticket.getFee()));
    	}
    }

수정된 Audience와 TicketSeller는 자신이 가지고 있는 소지품을 스스로 관리한다. 따라서 코드를 읽는 사람과의 의사소통이라는 관점에서 이 코드는 확실히 개선된 것으로 보인다. 더 중요한 점은 Audience나 TicketSeller의 내부 구현을 변경하더라도 Theater를 함께 변경할 필요가 없어졌다는 것이다. 따라서 수정된 코드는 변경 용이성의 측면에서도 확실히 개선됐다고 말할 수 있다. 

## 어떻게 한 것인가

**자기 자신의 문제를 스스로 해결하도록 코드를 변경한 것이다.** 우리는 우리의 직관을 따랐고 그 결과로 코드는 변경이 용이하고 이해 가능하도록 수정됐다. 

## 캡슐화와 응집도

핵심은 객체 내부의 상태를 **캡슐화**하고 객체 간에 오직 **메시지**를 통해서만 상호작용 하도록 만드는 것이다. 밀접하게 연관된 작업만을 수행하고 연관성 없는 작업은 다른 객체에게 위임하는 객체를 가리켜 응집도가 높다고 말한다. 자신의 데이터를 스스로 처리하는 자율적인 객체를 만들면 **결합도를 낮출 수 있을 뿐더러 응집도를 높일 수 있다.** 

**외부의 간섭을 최대한 배제하고 메시지를 통해서만 협력하는 자율적인 객체들의 공동체를 만드는 것이 훌륭한 객체지향 설계를 얻을 수 있는 지름길인 것이다.** 

## 절차지향과 객체지향

변경 전 초기 코드를 다시 살펴보자

Theater의 enter 메서드는 **프로세스(Process)**이며 Audience, TicketSeller, Bag, TicketOffice는 **데이터(Data)**이다. 이처럼 프로세스와 데이터를 별도의 모듈에 위치시키는 방식을 절차적 프로그래밍이라고 부른다. 

절차적 프로그래밍은 코드를 읽는 사람과 원활하게 의사소통하지 못한다. 더 큰 문제는 데이터의 변경으로 인한 영향을 지역적으로 고립시키기 어렵다

**변경하기 쉬운 설계는 한 번에 하나의 클래스만 변경할 수 있는 설계다.** 

해결 방법은 자신의 데이터를 스스로 처리하도록 프로세스의 적절한 단계를 Audience와 TicketSeller로 이동시키는 것이다. 이처럼 데이터와 프로세스가 동일한 모듈 내부에 위치하도록 프로그래밍하는 방식을 객체지향 프로그래밍이라고 부른다. 

**훌륭한 객제치향 설계의 핵심은 캡슐화를 이용해 의존성을 적절히 관리함으로써 객체 사이의 결합도를 낮추는 것이다.** 

## 책임의 이동

당신의 코드에서 데이터와 데이터를 사용하는 프로세스가 별도의 객체에 위치하고 있다면 절차적 프로그래밍 방식을 따르고 있을 확률이 높다. 데이터와 데이터를 사용하는 프로세스가 동일한 객체 안에 위치한다면 객체 객체지향 프로그래밍 방식을 따르고 있을 확률이 높다. 

설계를 어렵게 만드는 것은 의존성 이라는 것을 기억하라. **해결 방법은 불필요한 의존성을 제거함으로써 객체 사이의 결합도를 낮추는 것이다.** 

## 더 개선할 수 있다

Audience는 스스로 티켓을 구매하고 가방안의 내용물을 직접 관리한다. 하지만 Bag은 과거의 Audience처럼 스스로 자기 자신을 책임지지 않고 Audience에 의해 끌려다니는 수동적인 존재다. 

Bag을 자율적인 존재로 바꿔보자

    public class Bag {
    	private Long amount;
    	private Ticket ticket;
    	private Invitation invitation;
    
    	public Long hold(Ticket ticket) {
    		if(hasInvitation()) {
    			setTicket(ticket);
    			return 0;
    		} else {
    			setTicket(ticket);
    			minusAmount(ticket.getFee());
    			return ticket.getFee();
    		}
    	}
    
     ...
    }

    public class Audience {
    	public Long buy(Ticket ticket) {
    		return bag.hold(ticket);
    	}
    }

TicketSeller 역시 TicketOffice의 자율권을 침해하였다

    public class TicketOffice {
    	public void sellTicketTo(Audience audience) {
    		plusAmount(audience.buy(getTicket()));
    	}
    	...
    }

    public class TicketSeller {
    	public void sellTo(Audience audience) {
    		ticketOffice.sellTicketTo(audience));
    	}
    }

## 객제치향 설계

### 설계가 왜 필요한가

설계란 코드를 배치하는 것이다. **설계를 구현과 떨어트려서 이야기하는 것은 불가능하다.** 설계는 코드를 작성하는 매 순간 코드를 어떻게 배치할 것인지를 결정하는 과정에서 나온다. 설계는 코드 작성의 일부이며 코드를 작성하지 않고서는 검증할 수 없다. 

### 그렇다면 좋은 설계란 무엇인가?

**좋은 설계란 오늘 요구하는 기능을 온전히 수행하면서 내일의 변경을 매끄럽게 수용할 수 있는 설계다**

개발을 시작하는 시점에 구현에 필요한 모든 요구사항을 수집하는 것은 불가능에 가깝다. 모든 요구사항을 수집할 수 있다고 가정하더라도 개발이 진행되는 동안 요구사항은 바뀔 수밖에 없다. 

> 요구사항 변경은 필연적으로 코드 수정을 초래하고, 코드 수정은 버그가 발생할 가능성을 높인다. 코드 수정을 회피하려는 가장 큰 원인은 **두려움**이다. 그리고 그 두려움은 요구사항 변경으로 인해 버그를 추가할지도 모른다는 **불확실성**에 기인한다.

### 객체지향 설계

객제치향 프로그래밍은 **의존성**을 효율적으로 통제할 수 있는 다양한 방법을 제공함으로써 요구사항 변경에 좀 더 수월하게 대응할 수 있는 가능성을 높여준다. 단순히 데이터와 프로세스를 객체라는 덩어리 안으로 밀어 넣었다고 해서 변경하기 쉬운 설계를 얻을 수 있는 것은 아니다.