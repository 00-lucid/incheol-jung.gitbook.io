---
layout:     post
title:      "3장 역할,책임,협력"
date:       2020-03-10 00:00:00
categories: object
summary:    3장 역할,책임,협력
---

> 오브젝트의 3장을 요약한 내용 입니다.

객체지향 패러다임의 관점에서 핵심은 3가지로 표현할 수 있다. 

- **협력(collaboration)** : 객체들이 애플리케이션의 기능을 구현하기 위해 수행하는 상호작용
- **책임(responsibility)** : 객체가 협력에 참여하기 위해 수행하는 로직
- **역할(role)** : 객체들이 협력 안에서 수행하는 책임들이 모여 객체가 수행

애플리케이션의 기능을 구현하기 위해 어떤 **협력**이 필요하고 협력을 위해 어떤 **역할**과 **책임**이 필요한지를 고민하지 않은 채 너무 이른 시기에 구현에 초점을 맞추는 것은 변경하기 어렵고 유연하지 못한 코드를 낳는 원인이 된다. 

# 협력

## 협력

**자율적인 객체**란 자신의 상태를 직접 관리하고 스스로의 결정에 따라 행동하는 객체다. 객체의 자율성을 보장하기 위해서는 **필요한 정보**와 **정보에 기반한 행동**을 같은 객체 안에 모아놓아야 한다. 

자신이 할 수 없는 일을 다른 객체에게 **위임**하면 협력에 참여하는 객체들의 전체적인 자율성을 향상시킬 수 있다. 

결과적으로 객체를 자율적으로 만드는 가장 기본적인 방법은 내부 구현을 **캡슐화**하는 것이다. 

### 협력이 설계를 위한 문맥을 결정한다

객체가 가질 수 있는 상태와 행동을 어떤 기준으로 결정해야 할까?

객체를 설계할 때 어떤 행동과 상태를 할당했다면 그 이유는 무엇인가?

애플리케이션 안에 어떤 객체가 필요하다면 그 이유는 단 하나여야 한다. 그 객체가 어떤 **협력**에 참여하고 있기 때문이다. 그리고 객체가 협력에 참여할 수 있는 이유는 협력에 필요한 **적절한 행동**을 보유하고 있기 때문이다. 

# 책임

## 책임이란 무엇인가

책임이란 객체에 의해 정의되는 **응집도** 있는 행위의 집합으로, 객체가 유지해야 하는 정보와 수행할 수 있는 행동에 대해 개략적으로 서술한 문장이다. 즉, 객체의 책임은 객체가 '**무엇을 알고 있는가**'와 '**무엇을 할 수 있는가**'로 구성된다. 

- 하는 것
    - 객체를 생성하거나 계산을 수행하는 등의 스스로 하는 것
    - 다른 객체의 행동을 시작시키는 것
    - 다른 객체의 활동을 제어하고 조절하는 것
- 아는 것
    - 사적인 정보에 관해 아는 것
    - 관련된 객체에 관해 아는 것
    - 자신이 유도하거나 계산할 수 있는 것에 관해 아는 것

책임의 관점에서 '**아는 것**'과 '**하는 것**'이 밀접하게 연관돼 있다는 점이다. 

객체에게 얼마나 **적절한 책임**을 할당하느냐가 설계의 전체적인 품질을 결정한다. 

### 책임 할당

자율적인 객체를 만드는 가장 기본적인 방법은 책임을 수행하는 데 **필요한 정보**를 가장 잘 알고 있는 전문가에게 그 책임을 할당하는 것이다. 이를 책임 할당을 위한 **INFORMATION EXPERT 패턴**이라고 부른다. 

객체들 역시 협력에 **필요한 지식**과 **방법**을 가장 잘 알고 있는 객체에게 도움을 요청한다. 요청에 응답하기 위해 필요한 이 행동이 객체가 **수행할 책임**으로 이어지는 것이다. 

협력을 설계하면서 객체의 책임을 식별해 나가는 과정에서 최종적으로 얻게 되는 결과물은 시스템을 구성하는 객체들의 **인터페이스**와 **오퍼레이션의 목록**이다. 

물론 모든 책임 할당 과정이 이렇게 단순한 것은 아니다. 어떤 경우에는 응집도와 결합도의 관점에서 정보 전문가가 아닌 다른 객체에게 책임을 할당하는 것이 더 적절한 경우도 있다. 

### 책임 주도 설계

어떤 책임을 선택하느냐가 전체적인 설계의 **방향**과 **흐름**을 결정한다. 이처럼 책임을 찾고 책임을 수행할 적절한 객체를 찾아 책임을 할당하는 방식으로 협력을 설계하는 방법을 **책임 주도 설계(Responsibility-Driven Design, RDD)**라고 부른다.

책임 주도 설계 과정을 살펴보자

- 시스템이 사용자에게 제공해야 하는 기능인 시스템 책임을 파악한다.
- 시스템 책임을 더 작은 책임으로 분할한다.
- 분한될 책임을 수행할 수 있는 적절한 객체 또는 역할을 찾아 책임을 할당한다.
- 객체가 책임을 수행하는 도중 다른 객체의 도움이 필요한 경우 이를 책임질 적절한 객체 또는 열학을 찾는다
- 해당 객체 또는 역할에게 책임을 할당함으로써 두 객체가 협력하게 한다

구현이 아닌 책임에 집중하는 것이 중요한 이유는 유연하고 견고한 객체지향 시스템을 위해 가장 중요한 재료가 바로 책임이기 때문이다. 

### 메시지가 객체를 결정한다.

메시지가 객체를 선책하게 해야 하는 두 가지 중요한 이유가 있다. 

- 첫째, 객체가 최소한의 인터페이스를 가질 수 있게 된다.
- 둘째, 객체는 충분히 추상적인 인터페이스를 가질 수 있게 된다.

### 행동이 상태를 결정한다.

객체를 객체답게 만드는 것은 **객체의 상태가 아니라 객체가 다른 객체에게 제공하는 행동이다.** 

초보자들은 먼저 객체에 필요한 상태가 무엇인지를 결정하고, 그 후에 상태에 필요한 행동을 결정한다. 이런 방식은 객체의 내부 구현이 객체의 퍼블릭 인터페이스에 노출되도록 만들기 때문에 캡슐화를 저해한다. 객체의 내부 구현에 초점을 맞춘 설계 방벙을 **데이터-주도 설계(Data-Driven Design)**이라고 부르기도 했다. 

## 역할

### 역할과 협력

객체의 목적은 협력 안에서 객체가 맡게 되는 **책임의 집합**으로 표시된다. 

역할이 중요한 이유는 역할을 통해 유연하고 재사용 가능한 협력을 얻을 수 있기 때문이다. 

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7e5333c5-3f69-44ab-8b7d-fc0ab8c903f5/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7e5333c5-3f69-44ab-8b7d-fc0ab8c903f5/Untitled.png)

### 객체 대 역할

오직 한 종류의 객체만 협력에 참여하는 상황에서 역할이라는 개념을 고려하는 것이 유용할까?

역할이라는 개념을 생략하고 직접 객체를 이용해 협력을 설계하는 것이 더 좋지 않을까?

이런 경우에 역할을 사용하는 것은 상황을 오히려 더 복잡하게 만들는 것은 아닐까?

**애매하다면 단순하게 객체로 시작하고 반복적으로 책임과 협력을 정제해가면서 필요한 순간에 객체로부터 역할을 분리해내는 것이 가장 좋은 방법이다.** 

다양한 시나리오를 탐색하고 유사한 협력들을 단순화하고 합치다 보면 자연스럽게 역할이 그 모습을 드러낼 것이다. 

### 배우와 배역

연극의 배역과 배우 간의 관계에 다음과 같은 특성이 존재 한다. 

- 배역은 연극 배우가 특정 연극에서 연기하는 역할이다.
- 배역은 연극이 상영되는 동안에만 존재하는 일시적인 개념이다.
- 연극이 끝나면 연극 배우는 배역이라는 역할을 벗어 버리고 원래의 연극 배우로 돌아온다.

위의 사실로부터 연극의 배역과 배우간에는 다음과 같은 추가적인 특성이 존재한다는 사실을 알 수 있다. 

- **서로 다른 배우들이 동일한 배역을 연기할 수 있다.**
- **하나의 배우가 다양한 연극 안에서 서로 다른 배역을 연기할 수 있다.**

연극 안에서 배역을 연기하는 배우라는 은유는 협력 안에서 역할을 수행하는 **객체**라는 관점이 가진 입체적인 측면들을 훌륭하게 담아낸다. 

역할은 특정한 객체의 종류를 **캡슐화**하기 때문에 동일한 역할을 수행하고 계약을 준수하는 대체 가능한 객체들은 다형적이다.된다.** 관람객이 스스로 가방 안의 현금과 초대장을 처리하고 판매원이 스스로 매표소의 티켓과 판매 요금을 다루게 한다면 이 모든 문제를 한 번에 해결할 수 있을 것이다. 

## 자율성을 높이자

Theater의 enter 메서드에서 TicketOffice에 접근하는 모든 코드를 TicketSeller 내부로 숨기는 것이다. TicketSeller에 sellTo 메서드를 추가하고 Thater에 있던 로직을 이 메서드로 옮기자

    public class TheaterSeller {
    	private TicketOffice ticketOffice;
    
    	public Theater(TicketOffice ticketOffice) {
    		this.ticketOffice = ticketOffice;
    	}
    
    	public void sellTo(Audience audience) {
    		if(audience.getBag().hasInvitation()) {
    			Ticket ticket = ticketOffice.getTicket();
    			audience.getBag().getTicket(ticket);
    		} else {
    			Ticket ticket = ticketOffice.getTicket();
    			audience.getBag().minusAmount(ticket.getFee());
    			ticketOffice.plusAmount(ticket.getFee());
    			audience.getBag().setTicket(ticket);
    		}
    	}
    }

    public class Theater {
    	private TicketSeller ticketSeller;
    
    	public Theater(TicketSeller ticketSeller) {
    		this.ticketSeller = ticketSeller;
    	}
    
    	public void enter(Audience audience) {
    		ticketSeller.sellTo(audience);
    	}
    }

이처럼 개념적이나 물리적으로 객체 내부의 세부적인 사항을 감추는 것을 **캡슐화**라고 부른다. 캡슐화를 통해 객체 내부로의 접근을 제한하면 객체와 객체 사이의 결합도를 낮출 수 있기 때문에 설계를 좀 더 쉽게 변경할 수 있게 된다. 

Theater는 오직 TicketSeller의 인터페이스에만 의존한다. TicketSeller가 내부에 TicketOffice 인스턴스를 포함하고 있다는 사실은 구현의 영역에 속한다. 

TicketSeller 다음으로 Audience의 캡슐화를 개선하자

    public class Audience {
    	private Bag bag;
    
    	public Audience(Bag bag) {
    		this.bag = bag;
    	}
    
    	public Long buy(Ticket ticket) {
    		if(bag.hasInvitation()) {
    			bag.getTicket(ticket);
    			return 0;
    		} else { 
    			bag.minusAmount(ticket.getFee());
    			bag.setTicket(ticket);
    			return ticket.getFee();
    		}
    	}
    }

    public class TheaterSeller {
    	private TicketOffice ticketOffice;
    
    	public Theater(TicketOffice ticketOffice) {
    		this.ticketOffice = ticketOffice;
    	}
    
    	public void sellTo(Audience audience) {
    		iticketOffice.plusAmount(audience.buy(ticket.getFee()));
    	}
    }

수정된 Audience와 TicketSeller는 자신이 가지고 있는 소지품을 스스로 관리한다. 따라서 코드를 읽는 사람과의 의사소통이라는 관점에서 이 코드는 확실히 개선된 것으로 보인다. 더 중요한 점은 Audience나 TicketSeller의 내부 구현을 변경하더라도 Theater를 함께 변경할 필요가 없어졌다는 것이다. 따라서 수정된 코드는 변경 용이성의 측면에서도 확실히 개선됐다고 말할 수 있다. 

## 어떻게 한 것인가

**자기 자신의 문제를 스스로 해결하도록 코드를 변경한 것이다.** 우리는 우리의 직관을 따랐고 그 결과로 코드는 변경이 용이하고 이해 가능하도록 수정됐다. 

## 캡슐화와 응집도

핵심은 객체 내부의 상태를 **캡슐화**하고 객체 간에 오직 **메시지**를 통해서만 상호작용 하도록 만드는 것이다. 밀접하게 연관된 작업만을 수행하고 연관성 없는 작업은 다른 객체에게 위임하는 객체를 가리켜 응집도가 높다고 말한다. 자신의 데이터를 스스로 처리하는 자율적인 객체를 만들면 **결합도를 낮출 수 있을 뿐더러 응집도를 높일 수 있다.** 

**외부의 간섭을 최대한 배제하고 메시지를 통해서만 협력하는 자율적인 객체들의 공동체를 만드는 것이 훌륭한 객체지향 설계를 얻을 수 있는 지름길인 것이다.** 

## 절차지향과 객체지향

변경 전 초기 코드를 다시 살펴보자

Theater의 enter 메서드는 **프로세스(Process)**이며 Audience, TicketSeller, Bag, TicketOffice는 **데이터(Data)**이다. 이처럼 프로세스와 데이터를 별도의 모듈에 위치시키는 방식을 절차적 프로그래밍이라고 부른다. 

절차적 프로그래밍은 코드를 읽는 사람과 원활하게 의사소통하지 못한다. 더 큰 문제는 데이터의 변경으로 인한 영향을 지역적으로 고립시키기 어렵다

**변경하기 쉬운 설계는 한 번에 하나의 클래스만 변경할 수 있는 설계다.** 

해결 방법은 자신의 데이터를 스스로 처리하도록 프로세스의 적절한 단계를 Audience와 TicketSeller로 이동시키는 것이다. 이처럼 데이터와 프로세스가 동일한 모듈 내부에 위치하도록 프로그래밍하는 방식을 객체지향 프로그래밍이라고 부른다. 

**훌륭한 객제치향 설계의 핵심은 캡슐화를 이용해 의존성을 적절히 관리함으로써 객체 사이의 결합도를 낮추는 것이다.** 

## 책임의 이동

당신의 코드에서 데이터와 데이터를 사용하는 프로세스가 별도의 객체에 위치하고 있다면 절차적 프로그래밍 방식을 따르고 있을 확률이 높다. 데이터와 데이터를 사용하는 프로세스가 동일한 객체 안에 위치한다면 객체 객체지향 프로그래밍 방식을 따르고 있을 확률이 높다. 

설계를 어렵게 만드는 것은 의존성 이라는 것을 기억하라. **해결 방법은 불필요한 의존성을 제거함으로써 객체 사이의 결합도를 낮추는 것이다.** 

## 더 개선할 수 있다

Audience는 스스로 티켓을 구매하고 가방안의 내용물을 직접 관리한다. 하지만 Bag은 과거의 Audience처럼 스스로 자기 자신을 책임지지 않고 Audience에 의해 끌려다니는 수동적인 존재다. 

Bag을 자율적인 존재로 바꿔보자

    public class Bag {
    	private Long amount;
    	private Ticket ticket;
    	private Invitation invitation;
    
    	public Long hold(Ticket ticket) {
    		if(hasInvitation()) {
    			setTicket(ticket);
    			return 0;
    		} else {
    			setTicket(ticket);
    			minusAmount(ticket.getFee());
    			return ticket.getFee();
    		}
    	}
    
     ...
    }

    public class Audience {
    	public Long buy(Ticket ticket) {
    		return bag.hold(ticket);
    	}
    }

TicketSeller 역시 TicketOffice의 자율권을 침해하였다

    public class TicketOffice {
    	public void sellTicketTo(Audience audience) {
    		plusAmount(audience.buy(getTicket()));
    	}
    	...
    }

    public class TicketSeller {
    	public void sellTo(Audience audience) {
    		ticketOffice.sellTicketTo(audience));
    	}
    }

## 객제치향 설계

### 설계가 왜 필요한가

설계란 코드를 배치하는 것이다. **설계를 구현과 떨어트려서 이야기하는 것은 불가능하다.** 설계는 코드를 작성하는 매 순간 코드를 어떻게 배치할 것인지를 결정하는 과정에서 나온다. 설계는 코드 작성의 일부이며 코드를 작성하지 않고서는 검증할 수 없다. 

### 그렇다면 좋은 설계란 무엇인가?

**좋은 설계란 오늘 요구하는 기능을 온전히 수행하면서 내일의 변경을 매끄럽게 수용할 수 있는 설계다**

개발을 시작하는 시점에 구현에 필요한 모든 요구사항을 수집하는 것은 불가능에 가깝다. 모든 요구사항을 수집할 수 있다고 가정하더라도 개발이 진행되는 동안 요구사항은 바뀔 수밖에 없다. 

> 요구사항 변경은 필연적으로 코드 수정을 초래하고, 코드 수정은 버그가 발생할 가능성을 높인다. 코드 수정을 회피하려는 가장 큰 원인은 **두려움**이다. 그리고 그 두려움은 요구사항 변경으로 인해 버그를 추가할지도 모른다는 **불확실성**에 기인한다.

### 객체지향 설계

객제치향 프로그래밍은 **의존성**을 효율적으로 통제할 수 있는 다양한 방법을 제공함으로써 요구사항 변경에 좀 더 수월하게 대응할 수 있는 가능성을 높여준다. 단순히 데이터와 프로세스를 객체라는 덩어리 안으로 밀어 넣었다고 해서 변경하기 쉬운 설계를 얻을 수 있는 것은 아니다.