---
layout:     post
title:      "7장 객체 분해"
date:       2020-03-10 00:00:00
categories: object
summary:    오브젝트의 7장을 요약한 내용 입니다.
---

> 오브젝트 7장을 요약한 내용 입니다.

한 번에 다뤄야 하는 정보의 수를 줄이기 위해 본질적인 정보만 남기고 불필요한 세부 사항을 걸러내면 문제를 단순화할 수 있을 것이다. 이처럼 불필요한 정보를 제거하고 현재의 문제 해결에 필요한 핵심만 남기는 작업을 `추상화`라고 부른다. 
사람들은 한 번에 해결하기 어려운 `커다란 문제`에 맞닥뜨릴 경우 해결 가능한 작은 문제로 나누는 경향이 있다. 이처럼 큰 문제를 해결 가능한 작은 문제로 나누는 작업을 `분해`라고 부른다. 
따라서 `추상화`와 `분해`가 인류가 창조한 가장 복잡한 분야의 문제를 해결하기 위해 사용돼 왔다고 해도 놀랍지 않을 것이다. 그 분야는 바로 `소프트웨어 개발 영역`이다. 

# 프로시저 추상화와 데이터 추상화

## 추상화 메커니즘

- 프로시저 추상화 : 소프트웨어가 무엇을 해야 하는지
    - 기능 분해(알고리즘 분해)
- 데이터 추상화 : 소프트웨어가 무엇을 알아야 하는지
    - 타입 추상화
    - 프로시저 추상화

# 프로시저 추상화와 기능 분해

## 메인 함수로서의 시스템
전통적인 기능 분해 방법은 `하향식 접근법(Top-Down Approach)`을 따른다. 하향식 접근법이란 시스템을 구성하는 가장 최상위(topmost) 기능을 정의하고 이 최상위 기능을 좀 더 작은 단계의 `하위 기능으로 분해`해 나가는 방법을 말한다. 각 세분화 단계는 바로 위 단계보다 더 구체적이어야 한다. 

## 급여 관리 시스템
급여 관리 시스템을 구현하기 위해 기능 분해 방법을 사용해보자

```
    1. 직원의 급여를 계산한다. 
    	1-1. 사용자로부터 소득세율을 입력받는다. 
    		1-1-1. "세율을 입력하세요: "라는 문장을 화면에 출력한다. 
    		1-1-2. 키보드를 통해 세율을 입력받는다. 
    	1-2. 직원의 급여를 계산한다
    		1-2-1. 전역 변수에 저장된 직원의 기본급 정보를 얻는다
    		1-2-2. 급여를 계산한다
    	1-3. 양식에 맞게 결과를 출력한다
    		1-3-1. "이름: {직원명}, 급여 {계산된 금액}" 형식에 따라 출력 문자열을 생성한다
```
하향식 기능 분해 방식으로 설계한 시스템은 메인 함수를 루트로 하는 '트리(tree)'로 표현할 수 있다. 트리에서 각 노드(node)는 시스템을 구성하는 하나의 프로시저를 의미하고 한 노드의 자식 노드는 부모 노드를 구현하는 절차중의 한 단계를 의미한다. 

![https://drive.google.com/uc?id=17zSq8QOoq2c-Q3qvt8mFnhP8Af_JpU0E](https://drive.google.com/uc?id=17zSq8QOoq2c-Q3qvt8mFnhP8Af_JpU0E)

## 하향식 기능 분해의 문제점
실제로 설계에 적용하다 보면 다음과 같은 다양한 문제에 직면한다. 

### 시스템은 하나의 메인 함수로 구성돼 있지 않다.
시간이 지나고 사용자를 만족시키기 위한 새로운 요구사항을 도출해 나가면서 지속적으로 `새로운 기능`을 추가하게 된다. 모든 기능들은 규모라는 측면에서 차이가 있을 수는 있겠지만 가능성의 측면에서는 `동등`하게 독립적이고 완결된 하나의 기능을 표현한다. 

### 기능 추가나 요구사항 변경으로 인해 메인 함수를 빈번하게 수정해야 한다.
기존 로직과는 아무런 상관이 없는 새로운 함수의 적절한 위치를 확보해야 하기 때문에 `메인 함수의 구조`를 급격하게 변경할 수밖에 없을 것이다. 기존 코드를 수정하는 것은 항상 새로운 버그를 만들어낼 확률을 높인다는 점에 주의하라.

### 비즈니스 로직이 사용자 인터페이스와 강하게 결합된다.
하향식 접근법은 비즈니스 로직을 설계하는 초기 단계부터 `입력 방법`과 `출력 양식`을 함께 고민하도록 강요한다. 결과적으로 코드 안에서 `비즈니스 로직`과 `사용자 인터페이스 로직`이 밀접하게 결합된다. 
문제는 비즈니스 로직과 사용자 인터페이스가 변경되는 `빈도`가 다르다는 것이다. 따라서 사용자 인터페이스를 변경하는 경우 비즈니스 로직 까지 변경에 영향을 받게 된다. 따라서 하향식 접근법은 근본적으로 `변경에 불안정한 아키텍처`를 낳는다. 

### 하향식 분해는 너무 이른 시기에 함수들의 실행 순서를 고정시키기 때문에 유연성과 재사용성이 저하된다.
하향식 설계는 시작하는 시점부터 시스템이 `무엇을 해야 하는지`가 아니라 `어떻게 동작`해야 하는지에 집중하도록 만든다. 그렇기 때문에 함수들의 실행 순서를 정의하는 시간 제약을 강조한다. 
결과적으로 기능을 추가하거나 변경하는 작업은 매번 기존에 결정된 함수의 `제어 구조를 변경`하도록 만든다. 
하향식 접근법을 통해 분해한 함수들은 `재사용하기도 어렵다.` 모든 함수는 상위 함수를 분해하는 과정에서 필요에 따라 식별되며, 그에 따라 상위 함수가 강요하는 문맥 안에서만 의미를 가지기 때문이다. 

### 데이터 형식이 변경될 경우 파급효과를 예측할 수 없다.
하향식 기능 분해의 가장 큰 문제점은 어떤 데이터를 어떤 함수가 사용하고 있는지를 `추적하기 어렵다`는 것이다. 데이터의 영향 범위를 파악하기 위해서는 모든 함수를 열어 데이터를 사용하고 있는지를 모두 확인해봐야 하기 때문이다. 이를 해결하기 위해서는 `변경에 대한 영향을 최소화`하기 위해 영향을 받는 부분과 받지 않는 부분을 명확하게 분리하고 잘 정의된 `퍼블릭 인터페이스`를 통해 변경되는 부분에 대한 `접근을 통제`해야 한다. 

## 언제 하향식 분해가 유용한가?
하향식 아이디어가 매력적인 이유는 설계가 어느 정도 안정화된 후에는 설계의 다양한 측면을 논리적으로 설명하고 `문서화` 하기에 용이하기 때문이다. 그러나 설계를 문서화 하는 데 적절한 방법이 좋은 구조를 설계할 수 있는 방법과 동일한 것은 아니다. 

---

# 모듈

> 작성중입니다.